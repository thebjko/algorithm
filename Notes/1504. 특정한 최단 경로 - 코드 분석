# [Gold IV] 특정한 최단 경로 - 1504 

[문제 링크](https://www.acmicpc.net/problem/1504) 

### 성능 요약

메모리: 91024 KB, 시간: 668 ms

### 분류

그래프 이론, 데이크스트라

### 문제 설명

<p>방향성이 없는 그래프가 주어진다. 세준이는 1번 정점에서 N번 정점으로 최단 거리로 이동하려고 한다. 또한 세준이는 두 가지 조건을 만족하면서 이동하는 특정한 최단 경로를 구하고 싶은데, 그것은 바로 임의로 주어진 두 정점은 반드시 통과해야 한다는 것이다.</p>

<p>세준이는 한번 이동했던 정점은 물론, 한번 이동했던 간선도 다시 이동할 수 있다. 하지만 반드시 최단 경로로 이동해야 한다는 사실에 주의하라. 1번 정점에서 N번 정점으로 이동할 때, 주어진 두 정점을 반드시 거치면서 최단 경로로 이동하는 프로그램을 작성하시오.</p>

### 입력 

 <p>첫째 줄에 정점의 개수 N과 간선의 개수 E가 주어진다. (2 ≤ N ≤ 800, 0 ≤ E ≤ 200,000) 둘째 줄부터 E개의 줄에 걸쳐서 세 개의 정수 a, b, c가 주어지는데, a번 정점에서 b번 정점까지 양방향 길이 존재하며, 그 거리가 c라는 뜻이다. (1 ≤ c ≤ 1,000) 다음 줄에는 반드시 거쳐야 하는 두 개의 서로 다른 정점 번호 v<sub>1</sub>과 v<sub>2</sub>가 주어진다. (v<sub>1</sub> ≠ v<sub>2</sub>, v<sub>1</sub> ≠ N, v<sub>2</sub> ≠ 1) 임의의 두 정점 u와 v사이에는 간선이 최대 1개 존재한다.</p>

### 출력 

 <p>첫째 줄에 두 개의 정점을 지나는 최단 경로의 길이를 출력한다. 그러한 경로가 없을 때에는 -1을 출력한다.</p>

### 코드 분석
#### [dlrsh741 님의 코드 :](https://www.acmicpc.net/source/57506839)
```python
import sys
import heapq

def dijkstra(graph, start):
    distances = {node: float('inf') for node in graph}
    distances[start] = 0
    queue = []
    heapq.heappush(queue, (distances[start], start))

    while queue:
        current_distance, current_node = heapq.heappop(queue)

        if distances[current_node] < current_distance:
            continue

        for neighbor, weight in graph[current_node].items():
            distance = current_distance + weight
            if distance < distances[neighbor]:
                distances[neighbor] = distance
                heapq.heappush(queue, (distance, neighbor))

    return distances

def main():
    input = sys.stdin.readline
    N, E = map(int, input().split())
    graph = {i: {} for i in range(1, N+1)}

    for _ in range(E):
        a, b, c = map(int, input().split())
        graph[a][b] = c
        graph[b][a] = c

    v1, v2 = map(int, input().split())

    d1 = dijkstra(graph, 1)
    d2 = dijkstra(graph, v1)
    d3 = dijkstra(graph, v2)

    result1 = d1[v1] + d2[v2] + d3[N]
    result2 = d1[v2] + d3[v1] + d2[N]
    result = min(result1, result2)

    if result == float('inf'):
        print(-1)
    else:
        print(result)

if __name__ == "__main__":
    main()
```
> 메모리 약 59MB, 시간 312ms

1. 시작점에서 모든 다른 노드로 가는 경로를 구한 리스트 `distance`를 반환하도록 `dijkstra()` 함수를 작성했다. 반면에 나는 `set()`를 활용해 필요한 값만 구하도록 계산했다. 각각 방문 처리를 어떻게 하는지 유의하자.
2. 그래프에 딕셔너리와 세트를 사용했다.


#### 내 코드
```python
from math import inf, isinf
from heapq import heappop, heappush


a, *ls = open(0)
n, e = map(int, a.split())
graph = [[] for _ in range(n+1)]

for i in ls[:-1]:
    a, b, c = map(int, i.split())
    graph[a].append((b, c))
    graph[b].append((a, c))

v1, v2 = map(int, ls[-1].split())

# 데이크스트라 알고리즘
def dijkstra(start: int, end: int) -> int | float:
    heap, visited = [(0, start)], set()
    while heap:
        cost_from_start_node, current_node = heappop(heap)
        if current_node in visited:
            continue
        visited.add(current_node)
        if current_node == end:
            return cost_from_start_node
        for node_to_proceed, cost in graph[current_node]:
            if node_to_proceed in visited:
                continue
            cost_to_proceed = cost_from_start_node + cost
            heappush(heap, (cost_to_proceed, node_to_proceed))

    return inf


result = min([
    dijkstra(1, v1) + dijkstra(v1, v2) + dijkstra(v2, n),
    dijkstra(1, v2) + dijkstra(v2, v1) + dijkstra(v1, n),
])

print(-1 if isinf(result) else result)

"""
https://www.acmicpc.net/board/view/106196
4 5
1 2 100
1 3 1
2 3 1
2 4 10
3 4 1
1 2
"""
```